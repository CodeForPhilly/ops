# Inputs:
# project_resources
# project_name
# authorities
---
- name: generate desired service instances list
  set_fact:
    project_service_instances_want: >
      {{
        project_service_instances_want|default([]) +
        [{
          'authority': authority_name,
          'instances': lookup(
            'sequence',
            'count=' ~ authorities[authority_name]['count'] ~ ' format=%0.2d.' ~ authority_name,
            wantlist=True
          )
        }]
      }}
  loop: "{{ project_resources['services'] }}"
  loop_control:
    loop_var: svc
    label: "{{ svc.name }}"
  vars:
    authority_name: "{{ svc.authorities|selectattr('scope', 'equalto', project_authority_scope)|map(attribute='name')|first }}"

- name: get running service instances list
  register: get_running_instances_job
  shell: |
    import sys, json, docker
    d         = docker.from_env()
    all       = d.containers.list(all=True)
    instances = filter(lambda c: c.labels.get('civic-cloud.authority') == '{{ authority_name }}', all)
    instnames = map(lambda c: c.name, instances)

    sys.stdout.write(json.dumps(sorted(instnames)))
    sys.exit(0)
  args:
    executable: "{{ ansible_python.executable }}"
  changed_when: false
  loop: "{{ project_resources['services'] }}"
  loop_control:
    loop_var: svc
    label: "{{ svc.name }}"
  vars:
    authority_name: "{{ svc.authorities|selectattr('scope', 'equalto', project_authority_scope)|map(attribute='name')|first }}"

- name: register running service instances list
  set_fact:
    project_service_instances_have: >
      {{
        project_service_instances_have|default([]) +
        [{
          'authority': authority_name,
          'instances': svc_inst_get.stdout|from_json
        }]
      }}
  loop: "{{ get_running_instances_job.results }}"
  loop_control:
    loop_var: svc_inst_get
    label: "{{ svc_inst_get.svc.name }}"
  vars:
    authority_name: "{{ svc_inst_get.svc.authorities|selectattr('scope', 'equalto', project_authority_scope)|map(attribute='name')|first }}"

- name: scale in services
  when: instance_name not in (project_service_instances_want|selectattr('authority', 'equalto', authority_name)|first).instances
  docker_container:
    name: "{{ instance_name }}"
    state: absent
  loop: "{{ lookup('subelements', project_service_instances_have, 'instances', wantlist=True) }}"
  loop_control:
    label: "{{ instance_name }}"
  vars:
    authority_name: "{{ item[0].authority }}"
    instance_name: "{{ item[1] }}"

- name: deploy services

  docker_container:
    name: "{{ instance_name }}"
    image: "{{ svc_img }}"
    state: "{{ 'started' if svc.startup else 'present' }}"
    restart_policy: "{{ 'always' if svc.startup else omit }}"
    networks_cli_compatible: true
    network_mode: "{{ authority_parent }}"
    networks:
      - name: "{{ authority_parent }}"
        aliases:
          - "{{ authority_name }}"
    volumes: "{{ svc_vols if svc_vols|length > 0 else omit }}"
    labels:
      civic-cloud.authority: "{{ authority_name }}"
    ports: "{{ svc_ports if svc_ports|length > 0 else omit }}"

  loop: "{{ lookup('subelements', project_service_instances_want, 'instances', wantlist=True) }}"
  loop_control:
    label: "{{ instance_name }}"
  vars:
    authority_name: "{{ item[0].authority }}"
    authority_parent: "{{ authority_name.split('.', 1)[1] }}"
    instance_name: "{{ item[1] }}"
    svc: "{{ project_resources.services|selectattr('name', 'equalto', authority_name.split('.')[0])|first }}"
    svc_img: "{{ svc.container_opts.image if svc.container_opts.image|default('')|length > 0 else svc.container_opts.build.image }}"
    svc_vols_yaml: |
      {% for vol in project_resources.volumes %}
      {% for binding in vol.bindings %}
      {% if  binding.service == svc.name %}
      - {{ node_volmount_path ~ '/' ~ project_name ~ '/' ~ vol.name  }}:{{ binding.mountpoint }}
      {% endif %}
      {% endfor %}
      {% endfor %}
    svc_ports_yaml: |
      {% if svc.system is defined %}
      {% for port in svc.system.ports|default([]) %}
      - {{ port.node }}:{{ port.svc }}
      {% endfor %}
      {% endif %}
    svc_vols: "{{ svc_vols_yaml|from_yaml }}"
    svc_ports: "{{ svc_ports_yaml|from_yaml }}"
