# Inputs:
# project_name           : Grid-wide unique project name
# project_repo_url       : Git url repo can be publicly cloned from
# project_repo_path      : The local path the repo is cloned to. The repo must be present here.
# project_ref            : Identifier to tag container image builds
# project_compose_file   : Path to docker-compose file relative to repo root
# project_compose_cfg    : Unmarshalled YAML data from docker-compose file
#
# Outputs:
# project_resources
---
- name: validate compose file
  register: compose_validate_job
  changed_when: false
  shell: |
    import sys
    sys.stdout.write(sys.stdin.read())
    sys.exit(0)
  args:
    executable: "{{ ansible_python.executable }}"
    stdin: "{{ project_compose_cfg|to_json }}"

- name: parse project resources
  register: resource_parse_job
  changed_when: false
  command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/parse-project-{{ item }}.py"
  args:
    stdin: "{{ project_compose_cfg|to_json }}"
  environment:
    PYTHONPATH: "{{ playbook_dir }}/python/lib"
  loop:
    - volumes
    - services
    - routes

- name: register project resources
  vars:
    resource_type: "{{ item.item }}"
    resource_list: "{{ item.stdout|from_json }}"
  set_fact:
    project_resources: "{{ project_resources|default({})|combine({ resource_type: resource_list }) }}"
  loop: "{{ resource_parse_job.results }}"
  loop_control:
    label: "{{ resource_type }}"

- name: populate service domain names
  register: svc_domainnames_job
  changed_when: false
  command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/populate-service-authorities.py"
  vars:
    inputs:
      project_name: "{{ project_name }}"
      services: "{{ project_resources['services'] }}"
  args:
    stdin: "{{ inputs|to_json }}"
  environment:
    PYTHONPATH: "{{ playbook_dir }}/python/lib"

- name: register service grid names
  set_fact:
    project_resources: "{{ project_resources|combine({ 'services': svc_domainnames_job.stdout|from_json }) }}"

- name: parse service container build instructions
  register: svc_buildinfo_job
  changed_when: false
  command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/populate-service-buildinfo.py"
  vars:
    inputs:
      project_name         : "{{ project_name }}"
      project_repo_url     : "{{ project_repo_url }}"
      project_repo_path    : "{{ project_repo_path }}"
      project_ref          : "{{ project_ref }}"
      project_compose_file : "{{ project_compose_file }}"
      project_compose_cfg  : "{{ project_compose_cfg }}"
      services             : "{{ project_resources['services'] }}"
  args:
    stdin: "{{ inputs|to_json }}"
  environment:
    PYTHONPATH: "{{ playbook_dir }}/python/lib"

- name: register service container build instructions
  set_fact:
    project_resources: "{{ project_resources|combine({ 'services': svc_buildinfo_job.stdout|from_json }) }}"

- name: parse volume bindings
  register: vol_bindings_job
  changed_when: false
  command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/populate-volume-bindings.py"
  vars:
    inputs:
      project_compose_cfg  : "{{ project_compose_cfg }}"
      volumes              : "{{ project_resources['volumes'] }}"
  args:
    stdin: "{{ inputs|to_json }}"
  environment:
    PYTHONPATH: "{{ playbook_dir }}/python/lib"

- name: register volume bindings
  set_fact:
    project_resources: "{{ project_resources|combine({ 'volumes': vol_bindings_job.stdout|from_json }) }}"
