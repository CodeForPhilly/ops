---
- name: system supernet
  when: authorities['system.domain']['network'] is not defined
  block:

    - name: generate system supernet
      vars:
        new_supernet_pfxlen: 48
      import_tasks: tasks/python-gen-supernet.yml

    - name: register system supernet
      register: system_supernet_set_job
      changed_when: new_supernet is defined
      set_fact:
        authorities: >-
          {{
              authorities|
              combine({
                'system.domain': authorities['system.domain']|
                combine({ 'network': new_supernet })
              })
          }}

- name: node supernet
  when: authorities['node.domain']['network'] is not defined
  block:

    - name: generate node supernet
      register: gen_node_supernet_tasks
      vars:
        new_supernet_pfxlen: 48
      import_tasks: tasks/python-gen-supernet.yml

    - name: register node supernet
      changed_when: new_supernet is defined
      register: node_supernet_set_job
      set_fact:
        authorities: >-
          {{
              authorities|
              combine({
                'node.domain': authorities['node.domain']|
                combine({ 'network': new_supernet })
              })
          }}

- name: commit system supernet
  when: system_supernet_set_job.changed
  shell: |
    import sys, sqlite3
    db = sqlite3.connect('{{ node_systemdb_path }}')
    db.executescript('''

      insert into authorities (name, attribute, value)
      values ("system.domain", "network", "{{ authorities['system.domain']['network'] }}")

    ''')
    db.commit()
    db.close()
    sys.exit(0)
  args:
    executable: "{{ ansible_python.executable }}"

- name: commit node supernet
  when: node_supernet_set_job.changed
  shell: |
    import sys, sqlite3
    db = sqlite3.connect('{{ node_systemdb_path }}')
    db.executescript('''

      insert into authorities (name, attribute, value)
      values ("node.domain", "network", "{{ authorities['node.domain']['network'] }}")

    ''')
    db.commit()
    db.close()
    sys.exit(0)
  args:
    executable: "{{ ansible_python.executable }}"
