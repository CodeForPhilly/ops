# Inputs:
# project_name
# project_resources
---
- name: project volume storage
  file:
    path: "{{ node_volstorage_mountpoint }}/{{ project_name }}"
    state: directory

- name: volume mountpoints
  file:
    path: "{{ vol_mountpoint }}"
    state: directory
  loop: "{{ project_resources['volumes'] }}"
  loop_control:
    loop_var: vol
    label: "{{ vol.name }}"
  vars:
    vol_mountpoint: "{{ node_volmount_path }}/{{ project_name }}/{{ vol.name }}"

- name: create volumes
  register: vols_create_job
  command: truncate -s {{ vol.size }} {{ vol_path }}
  args:
    creates: "{{ vol_path }}"
  loop: "{{ project_resources['volumes'] }}"
  loop_control:
    loop_var: vol
    label: "{{ vol.name }}"
  vars:
    vol_path: "{{ node_volstorage_mountpoint }}/{{ project_name }}/{{ vol.name }}"

- name: format volumes
  filesystem:
    dev: "{{ vol_path }}"
    fstype: xfs
  loop: "{{ project_resources['volumes'] }}"
  loop_control:
    loop_var: vol
    label: "{{ vol.name }}"
  vars:
    vol_path: "{{ node_volstorage_mountpoint }}/{{ project_name }}/{{ vol.name }}"

- name: mount volumes
  loop: "{{ project_resources['volumes'] }}"
  mount:
    src: "{{ vol_path }}"
    path: "{{ vol_mountpoint }}"
    state: mounted
    fstype: xfs
    opts: loop,nofail
  loop_control:
    loop_var: vol
    label: "{{ vol.name }}"
  vars:
    vol_path: "{{ node_volstorage_mountpoint }}/{{ project_name }}/{{ vol.name }}"
    vol_mountpoint: "{{ node_volmount_path }}/{{ project_name }}/{{ vol.name }}"

- name: initial data imports - from container images
  when:
    - vol_create_job.changed
    - vol_import_src.name not in ['http', 'https']
  shell: |
    set -e

    if docker container inspect {{ tmp_container_name }}; then
      docker rm -f {{ tmp_container_name }}
    fi
    trap 'docker rm -f {{ tmp_container_name }}' EXIT SIGINT SIGTERM SIGQUIT

    docker container create --name {{ tmp_container_name }} {{ vol_import_img }}
    docker cp {{ tmp_container_name }}:{{ vol_import_src.location }}/. {{ vol_mountpoint }}

  loop: "{{ lookup('subelements', vols_create_job.results, 'vol.import.srcs', wantlist=True) }}"
  loop_control:
    label: "{{ vol.name }}"
  vars:
    vol: "{{ item[0].vol }}"
    vol_create_job: "{{ item[0] }}"
    vol_import_src: "{{ item[1] }}"
    vol_mountpoint: "{{ node_volmount_path }}/{{ project_name }}/{{ vol.name }}"
    tmp_container_name: "{{ vol.name }}-import"
    vol_import_img: >-
      {{
        (project_resources['services']|selectattr('name', 'equalto', vol_import_src.name)|first)['container_opts']['image']|
        default((project_resources['services']|selectattr('name', 'equalto', vol_import_src.name)|first)['container_opts']['build']['image'])
      }}
