#!/usr/bin/env ansible-playbook
---
- name: 'Arch - Install python'
  hosts: archlinux
  gather_facts: false
  vars:
    ansible_user: root
  tasks:

    - name: install python
      raw: |
        set -e
        if ! type python; then
          pacman -Syu --noconfirm python
          printf 'status:changed'
        else
          printf 'status:ok'
        fi
      register: py_install_job
      changed_when: py_install_job.stdout.endswith('status:changed')

    - name: reboot system
      when: py_install_job.changed
      raw: sleep 2; systemctl reboot
      async: 600
      poll: 0
      register: reboot_job

    - name: wait for system to go down
      when: reboot_job.changed
      wait_for:
        port: "{{ ansible_port|default(22) }}"
        host: "{{ ansible_host|default(inventory_hostname) }}"
        state: absent
      delegate_to: localhost

- name: 'Initialize ansible environment'
  hosts: nodes
  gather_facts: false
  vars:
    ansible_user: root
  tasks:
    - name: wait for system to come online
      wait_for:
        port: "{{ ansible_port|default(22) }}"
        host: "{{ ansible_host|default(inventory_hostname) }}"
        search_regex: ^SSH-2
        timeout: 600
      delegate_to: localhost

    - name: create admin user
      raw: |
        set -e
        if ! [ -e /home/{{ node_admin_user }} ]; then
          useradd -Umd /home/{{ node_admin_user }} -s /bin/bash {{ node_admin_user }}
          mkdir /home/{{ node_admin_user }}/.ssh
          chmod 700  /home/{{ node_admin_user }}/.ssh
          cp -a ~/.ssh/authorized_keys /home/{{ node_admin_user }}/.ssh/authorized_keys
          chown -R {{ node_admin_user }}: /home/{{ node_admin_user }}
          cat <<EOF > /etc/sudoers.d/{{ node_admin_user }}
        {{ node_admin_user }} ALL=(ALL) NOPASSWD: ALL
        EOF
          printf 'status:changed'
        else
          printf 'status:ok'
        fi
      register: node_admin_user_job
      changed_when: node_admin_user_job.stdout.endswith('status:changed')

    - name: initialize python environment
      raw: |
        set -e
        if ! [ -e "{{ node_admin_venv }}" ]; then
          python -m venv "{{ node_admin_venv }}"
          chown -R {{ node_admin_user }}: /home/{{ node_admin_user }}
          printf 'status:changed'
        else
          printf 'status:ok'
        fi
      register: py_env_job
      changed_when: py_env_job.stdout.endswith('status:changed')

    - name: disable root login
      vars:
        sshd_svc: sshd
        sshd_cfg: /etc/ssh/sshd_config
      raw: |
        set -e
        read opt val <<< $(grep '^PermitRootLogin' {{ sshd_cfg }} || true)
        if [ -z "$opt" ] || [ "$val" != 'no' ]; then
          sed -i '/^PermitRootLogin/d' {{ sshd_cfg }}
          sed -i '$aPermitRootLogin no' {{ sshd_cfg }}
          systemctl reload {{ sshd_svc }}
          printf 'status:changed'
        else
          printf 'status:ok'
        fi
      register: root_login_job
      changed_when: root_login_job.stdout.endswith('status:changed')
