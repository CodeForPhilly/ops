#!/usr/bin/env ansible-playbook
---
- name: Intake project from docker-compose.yml
  hosts: localhost
  vars:
    project_repo_url     : "{{ lookup('env', 'PROJECT_GIT_URL') }}" # REQUIRED
    project_ref          : "{{ lookup('env', 'PROJECT_GIT_REF') }}" # REQUIRED
    project_name         : "{{ lookup('env', 'PROJECT_NAME') }}"
    project_compose_file : "{{ lookup('env', 'COMPOSE_FILE') }}"
    project_compose_path : "{{ (project_repo_path ~ '/' ~ project_compose_file) | realpath }}"
    project_repo_path    : "{{ playbook_dir ~ '/project-repos/' ~ project_name }}"
  tasks:
    - name: validate input vars
      assert:
        that:
          - project_repo_url |length > 0
          - project_ref      |length > 0
        success_msg: required variables ok
        fail_msg:
          - 'missing one or more required variables'
          - 'project_repo_url = {{ project_repo_url }}'
          - 'project_ref      = {{ project_ref }}'

    - name: set default compose file
      when: project_compose_file|length == 0
      set_fact:
        project_compose_file: docker-compose.yml

    - name: set default project name
      when: project_name|length == 0
      set_fact:
        project_name: >-
          {% if project_repo_url|basename == '.git' -%}
          {{ project_repo_url|dirname|basename }}
          {%- else -%}
          {{ project_repo_url|basename|regex_replace('(.*)\.git', '\1') }}
          {%- endif %}

    - name: clone project
      when: project_repo_url|length > 0
      git:
        repo: "{{ project_repo_url }}"
        dest: "{{ project_repo_path }}"
        version: "{{ project_ref }}"
        depth: 1

    - name: load compose file
      set_fact:
        project_compose_cfg: "{{ lookup('file', project_compose_path)|from_yaml }}"

    - name: validate compose file
      register: compose_validate_job
      changed_when: false
      shell: |
        import sys
        sys.stdout.write(sys.stdin.read())
        sys.exit(0)
      args:
        executable: "{{ ansible_python.executable }}"
        stdin: "{{ project_compose_cfg|to_json }}"

    - name: parse project resources
      register: resource_parse_job
      changed_when: false
      command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/parse-project-{{ item }}.py"
      args:
        stdin: "{{ project_compose_cfg|to_json }}"
      environment:
        PYTHONPATH: "{{ playbook_dir }}/python/lib"
      loop:
        - volumes
        - services
        - routes

    - name: import project resources
      vars:
        resource_type: "{{ item.item }}"
        resource_list: "{{ item.stdout|from_json }}"
      set_fact:
        project_resources: "{{ project_resources|default({})|combine({ resource_type: resource_list }) }}"
      loop: "{{ resource_parse_job.results }}"
      loop_control:
        label: "{{ resource_type }}"

    - name: populate service grid names
      register: svc_gridnames_job
      changed_when: false
      command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/populate-service-gridnames.py"
      vars:
        inputs:
          project_name: "{{ project_name }}"
          services: "{{ project_resources['services'] }}"
      args:
        stdin: "{{ inputs|to_json }}"
      environment:
        PYTHONPATH: "{{ playbook_dir }}/python/lib"

    - name: import service grid names
      set_fact:
        project_resources: "{{ project_resources|combine({ 'services': svc_gridnames_job.stdout|from_json }) }}"

    - name: parse service container build instructions
      register: svc_buildinfo_job
      changed_when: false
      command: "{{ ansible_python.executable }} {{ playbook_dir }}/python/scripts/populate-service-buildinfo.py"
      vars:
        inputs:
          project_name         : "{{ project_name }}"
          project_repo_url     : "{{ project_repo_url }}"
          project_repo_path    : "{{ project_repo_path }}"
          project_ref          : "{{ project_ref }}"
          project_compose_file : "{{ project_compose_file }}"
          project_compose_cfg  : "{{ project_compose_cfg }}"
          services             : "{{ project_resources['services'] }}"
      args:
        stdin: "{{ inputs|to_json }}"
      environment:
        PYTHONPATH: "{{ playbook_dir }}/python/lib"

    - name: import service container build instructions
      set_fact:
        project_resources: "{{ project_resources|combine({ 'services': svc_buildinfo_job.stdout|from_json }) }}"

    - name: show project resource records
      debug:
        var: project_resources
